// @flow

import * as React from 'react';
import { defineMessages, FormattedMessage as M } from 'react-intl';

import TextField from '@material-ui/core/TextField';

import SimpleDialog from '../../misc/SimpleDialog';

import { Project } from '../../../core/store/projects';

const messages = defineMessages({
  title: {
    id: 'app.projects.rename_project_dialog.title',
    description: 'Title for the project rename dialog',
    defaultMessage: 'Rename project',
  },
  description: {
    id: 'app.projects.rename_project_dialog.description',
    description: 'Text for the project rename dialog',
    defaultMessage: "Please enter the project's new name.",
  },
  label: {
    id: 'app.projects.rename_project_dialog.new_name_label',
    description: "Label for the project creation dialog's text field",
    defaultMessage: 'Project Name',
  },
});

type SimpleDialogProps = React.ElementProps<typeof SimpleDialog>;

// this type has all properties that are generated by mountSimpleDialog()
type MountedSimpleDialogProps = $Diff<
  SimpleDialogProps,
  // these are the ones that aren't
  {|
    id: $PropertyType<SimpleDialogProps, 'id'>,
  |},
>;

type RenameProjectDialogHook = {|
  show(project: Project): void,
  mountSimpleDialog(): MountedSimpleDialogProps,
|};

type Config = {|
  project: Project,
|};

export default function useRenameProjectDialog(
  onRename: (Project, string) => boolean | Promise<boolean>,
  allProjects: Project[],
): RenameProjectDialogHook {
  const [open, setOpen] = React.useState<boolean>(false);
  const [config, setConfig] = React.useState<Config | null>(null);
  const [newProjectName, setNewProjectName] = React.useState<string>('');

  function show(project: Project) {
    setOpen(true);
    setConfig({ project });
    setNewProjectName(project.name);
  }

  function onCancel() {
    setOpen(false);
  }

  function onChange(event) {
    const name = event.target.value;
    const nameClean = name.replace(/[^-\w#$%().,:; ]/g, '');
    setNewProjectName(nameClean);
  }

  async function onConfirm() {
    // eslint-disable-next-line no-throw-literal
    if (!open) throw 'dialog is not shown';
    // eslint-disable-next-line no-throw-literal
    if (config === null) throw 'unreachable';

    const { project } = config;

    const success = await onRename(project, newProjectName);
    if (success) {
      setOpen(false);
    }
  }

  const valid =
    newProjectName !== '' && allProjects.every(project => project.name !== newProjectName);

  return {
    show,
    mountSimpleDialog() {
      return {
        open,
        valid,
        title: <M {...messages.title} />,
        description: <M {...messages.description} />,
        actions: 'OK_CANCEL',
        onCancel,
        onConfirm,
        children: (
          <TextField
            autoFocus
            margin="dense"
            id="name"
            label={<M {...messages.label} />}
            type="text"
            value={newProjectName}
            onChange={onChange}
            error={!valid}
            fullWidth
          />
        ),
      };
    },
  };
}
