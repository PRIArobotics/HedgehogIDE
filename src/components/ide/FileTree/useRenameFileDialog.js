// @flow

import * as React from 'react';
import { defineMessages, FormattedMessage as M } from 'react-intl';

import TextField from '@material-ui/core/TextField';

import SimpleDialog from '../../misc/SimpleDialog';

import type { FileReference } from '.';

const messages = defineMessages({
  title: {
    id: 'app.ide.rename_file_dialog.title',
    description: 'Title for the file rename dialog',
    defaultMessage: 'Rename {type, select, FILE {file} DIRECTORY {folder}}',
  },
  description: {
    id: 'app.ide.rename_file_dialog.description',
    description: 'Text for the file rename dialog',
    defaultMessage:
      "Please enter the {type, select, FILE {file's} DIRECTORY {folder's}} new name.",
  },
});

type SimpleDialogProps = React.ElementProps<typeof SimpleDialog>;

// this type has all properties that are generated by mountSimpleDialog()
type MountedSimpleDialogProps = $Diff<
  SimpleDialogProps,
  // these are the ones that aren't
  {|
    id: $PropertyType<SimpleDialogProps, 'id'>,
  |},
>;

type RenameFileDialogHook = {|
  show(file: FileReference, siblingNames: string[]): void,
  mountSimpleDialog(): MountedSimpleDialogProps,
|};

type Config = {|
  file: FileReference,
  siblingNames: string[],
|};

export default function useRenameFileDialog(
  onRename: (
    file: FileReference,
    newFileName: string,
  ) => boolean | Promise<boolean>,
): RenameFileDialogHook {
  const [open, setOpen] = React.useState<boolean>(false);
  const [config, setConfig] = React.useState<Config | null>(null);
  const [newFileName, setNewFileName] = React.useState<string>('');

  function show(file: FileReference, siblingNames: string[]) {
    setOpen(true);
    setConfig({ file, siblingNames });
    setNewFileName(file.file.name);
  }

  function onCancel() {
    setOpen(false);
  }

  function onChange(event) {
    const name = event.target.value;
    const nameClean = name.replace(/[^-\w#$%().,:; ]/g, '');
    setNewFileName(nameClean);
  }
  async function onConfirm() {
    // eslint-disable-next-line no-throw-literal
    if (!open) throw 'dialog is not shown';
    // eslint-disable-next-line no-throw-literal
    if (config === null) throw 'unreachable';

    const { file } = config;

    const success = await onRename(file, newFileName);
    if (success) {
      setOpen(false);
    }
  }

  const type = config?.file.file.isDirectory() ?? false ? 'DIRECTORY' : 'FILE';
  const siblingNames = config?.siblingNames ?? [];

  const valid =
    newFileName !== '' && siblingNames.every(name => name !== newFileName);

  return {
    show,
    mountSimpleDialog() {
      return {
        open,
        valid,
        title: <M {...messages.title} values={{ type }} />,
        description: <M {...messages.description} values={{ type }} />,
        actions: 'OK_CANCEL',
        onCancel,
        onConfirm,
        children: (
          <TextField
            autoFocus
            margin="dense"
            id="name"
            type="text"
            value={newFileName}
            onChange={onChange}
            error={!valid}
            fullWidth
          />
        ),
      };
    },
  };
}
